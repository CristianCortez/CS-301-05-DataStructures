(define (binomial N K) (if (equal? K 0) 1 (if (equal? N K) 1 (+ (binomial (- N 1) K) (binomial (- N 1) (- K 1))))))
(define (mod N M) (if (< N M) N (if (equal? N 0) 0 (mod (- N M) M))))
(define (binaryToDecimal b) (binaryHelper b 0))
(define (binaryHelper b count) (if (equal? b 0) 0 (+ (* (mod b 10) (expt 2 count)) (binaryHelper (quotient b 10) (+ count 1)))))
(define (addBinary lst) (if (null? lst) 0 (+ (binaryToDecimal (car lst)) (addBinary (cdr lst)))))
(define (min lst) (minHelper (cdr lst) (car lst)))
(define (minHelper lst currentMin) (if (null? lst) currentMin (if (< (car lst) currentMin) (minHelper (cdr lst) (car lst)) (minHelper (cdr lst) currentMin))))
(define (myRemove atm lst) (if (null? lst) '() (if (equal? atm (car lst)) (myRemove atm (cdr lst)) (cons (car lst) (myRemove atm (cdr lst))))))
(define (selectionSort lst) (if (null? lst) '() (cons (min lst) (selectionSort (myRemove (min lst) lst)))))
(display (binomial 7 5))
(newline)
(display (mod 9 5))
(newline)
(display (binaryToDecimal 1010))
(newline)
(display (addBinary '(1010 100)))
(newline)
(display (min '(5 1 4 6 7)))
(newline)
(display (myRemove 4 '(7 8 9 4 4 6 3)))
(newline)
(display (selectionSort '(9 8 7 2 10 1)))
